// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "./challenge/NumenWallet.sol";
import "./Exploit.sol";

contract ExploitTest is Test {
    function test() public {
        address playerAddress = makeAddr("player");
        Wallet wallet = new Wallet();
        vm.deal(playerAddress, 1 ether);

        vm.startPrank(playerAddress, playerAddress);
        Exploit exploit = new Exploit();
        exploit.exploit(address(wallet));
        vm.stopPrank();

        assertTrue(wallet.isSolved(), "Invalid Instance");
    }

    function _test2() public {
        address playerAddress = makeAddr("player");
        Wallet wallet = new Wallet();
        vm.deal(playerAddress, 1 ether);

        uint256[] memory privateKeys = new uint256[](5);
        privateKeys[0] = 0x503f38a9c967ed597e47fe25643985f032b072db8075426a92110f82df48dfcb;
        privateKeys[1] = 0x7e5bfb82febc4c2c8529167104271ceec190eafdca277314912eaabdb67c6e5f;
        privateKeys[2] = 0xcc6d63f85de8fef05446ebdd3c537c72152d0fc437fd7aa62b3019b79bd1fdd4;
        privateKeys[3] = 0x638b5c6c8c5903b15f0d3bf5d3f175c64e6e98a10bdb9768a2003bf773dcb86a;
        privateKeys[4] = 0xf49bf239b6e554fdd08694fde6c67dac4d01c04e0dda5ee11abee478983f3bc0;

        uint256 amount = 100 * 10 ** 18;
        address to = address(0x1337);

        SignedByowner[] memory signs = new SignedByowner[](5);
        for (uint256 i = 0; i < 5; i++) {
            bytes memory serialized = abi.encode(to, amount, true, "");
            bytes32 hash_ = keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", serialized));
            (uint8 v, bytes32 r, bytes32 s) = vm.sign(privateKeys[i], hash_);
            signs[i] = SignedByowner(Holder(vm.addr(privateKeys[i]), "", true, ""), Signature(v, [r, s]));
            emit log_address(signs[i].holder.user);
        }

        vm.startPrank(playerAddress, playerAddress);
        wallet.transferWithSign(to, amount, signs);
        vm.stopPrank();

        assertTrue(wallet.isSolved(), "Invalid Instance");
    }
}
